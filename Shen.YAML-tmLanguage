# [PackageDev] target_format: plist, ext: tmLanguage
---

name: Shen
scopeName: source.shen
fileTypes: [shen]
uuid: 4f20d927-cddd-4fd7-a7a6-9739f008439d

patterns:
- include: '#comments'
- include: '#parens'

repository:

  comments:
    patterns:
    - name: comment.line
      match: \\\\.*$
    - name: comment.block
      begin: \\\*
      end: \*\\

  parens:
    patterns:
    - name: meta.group
      begin: \(
      beginCaptures:
        '0': {name: punctuation.definition.group.begin}
      end: \)
      endCaptures:
        '0': {name: punctuation.definition.group.end}
      patterns:
      - include: '#expressions'
      - include: '#parens'
      - include: '#squares'

  squares:
    patterns:
    - name: meta.group
      begin: \[
      beginCaptures:
        '0': {name: punctuation.definition.group.begin}
      end: \]
      endCaptures:
        '0': {name: punctuation.definition.group.end}
      patterns:
      - include: '#expressions'
      - include: '#parens'
      - include: '#squares'

  expressions:
    patterns:
    - include: '#comments'
    - include: '#strings'
    - include: '#literals'
    - include: '#symbols'

  strings:
    patterns:
    - name: string.quoted.double
      begin: '"'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin}
      end: '"'
      endCaptures:
        '0': {name: punctuation.definition.string.end}
      patterns:
      - match: (~A|~R|~S|~%|c#\d;|c#\d\d;|c#\d\d\d;)
        name: constant.character.escape

  literals:
    patterns:
    - name: constant.numeric
      match: (?<=^|[\s()\[\]])[+-]*\d+\.?\d*(?=$|[\s()\[\]])
    - name: constant.language
      match: (?<=^|[\s()\[\]])(true|false)(?=$|[\s()\[\]])
    - name: constant.language
      match: \(\)
    - name: constant.language
      match: (?<=^|[\s()\[\]])_(?=$|[\s()\[\]])

  symbols:
    patterns:
    - include: '#keywords'
    - include: '#standard'
    - include: '#variables'

  keywords:
    patterns:
    - name: keyword.control
      match: (?<=^|[\s()\[\]])(and|or|if|do|lambda|freeze|let|cond|simple-error|error|trap-error|where|package|defun|/.|->|<-|:=|define|defmacro|defcc|defprolog)(?=$|[\s()\[\]])

  standard:
    patterns:
    - name: keyword.operator
      match: (?<=^|[\s()\[\]])(?i:=|<|>|<=|>=|\+|-|\*|/)(?=$|[\s()\[\]])
    - name: support.function
      match: (?<=^|[\s()\[\]])(eval-kl|get|put|set|value|fail|not|intern|output|print|map|for-each|append|length|cons|hd|tl|cn|str|string\?|boolean\?|symbol\?|number\?|empty\?|cons\?)(?=$|[\s()\[\]])
    - name: support.variable
      match: (?<=^|[\s()\[\]])\*(language|implementation|version|release|os|port|porters|home-directory|history|call|infs|process-counter|catch|tc|continue-repl-loop)\*(?=$|[\s()\[\]])
    - name: support.type
      match: (?<=^|[\s()\[\]])(string|boolean|symbol|number|list)(?=$|[\s()\[\]])

  variables:
    patterns:
    - name: variable.language
      match: (?<=^|[\s()\[\]])([A-Z][^\s()\[\]]*)(?=$|[\s()\[\]])
    - name: variable.other
      match: (?<=^|[\s()\[\]])(<[^\s()\[\]]*>)(?=$|[\s()\[\]])
    # TODO: symbols after define/defcc/defmacro/package are not idle
    - name: constant.language
      match: (?<=^|[\s)\[\]])([^A-Z\s()\[\]\|][^\s()\[\]]*)(?=$|[\s()\[\]])

...
